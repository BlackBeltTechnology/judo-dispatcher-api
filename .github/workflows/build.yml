name: java CI with maven

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  workflow_dispatch:

jobs:
  build:
    runs-on: judong

    steps:

      - uses: actions/checkout@v2
      - uses: olafurpg/setup-gpg@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'

      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v4
        with:
          servers: |-
            [
                {
                    "id": "judong-nexus-mirror",
                    "username": "${{ secrets.SECRET_TOKEN }}",
                    "password": "${{ secrets.SECRET_TOKEN }}"
                },
                {
                    "id": "judong-nexus-distribution",
                    "username": "${{ secrets.SECRET_TOKEN }}",
                    "password": "${{ secrets.SECRET_TOKEN }}"
                }
            ]
          mirrors: |-
            [
                {
                    "id": "judong-nexus-mirror",
                    "mirrorOf": "*",
                    "url": "https://nexus.judo.technology/repository/maven-judong/"
                 }
            ]
          profiles: |-
            [
                {
                    "id": "gpg",
                    "name": "gpg",
                    "activation": {
                        "activeByDefault" : true
                    },
                    "properties": {
                        "altReleaseDeploymentRepository": "dummy::default::file:///tmp/maven-release/"
                        "gpg.keyname": "${{ secrets.GPG_KEYNAME }}"
                        "gpg.passphrase": "${{ secrets.GPG_PASSPHRASE }}"
                    }
                },
                {
                    "id": "judong-release",
                    "name": "judong-release",
                    "properties": {
                        "altReleaseDeploymentRepository": "releases::default::https://nexus.judo.technology/repository/maven-judong/"
                    }
                },
                {
                    "id": "dummy-release",
                    "name": "dummy-release",
                    "properties": {
                        "altReleaseDeploymentRepository": "dummy::default::file:///tmp/maven-release/"
                    }
                }
            ]


      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Setup GPG
        run: |-
          echo "$GPG_SECRET_KEYS" | base64 --decode | gpg --import --batch
          echo "$GPG_OWNERTRUST" | base64 --decode | gpg --import-ownertrust
        env:
          GPG_SECRET_KEYS: ${{ secrets.GPG_SECRET_KEYS }}
          GPG_OWNERTRUST: ${{ secrets.GPG_OWNERTRUST }}

      - name: Calculate version number
        id: version
        run: |-
          export TAG_NAME=$(echo "$GITHUB_REF" | cut -d ' ' -f2 | tr '#\/\.-' '_')
          export SLUG=$(echo "${GITHUB_SHA}" | cut -c1-7)
          export BASE_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout | cut -d'-' -f 1)
          export VERSION_NUMBER=${BASE_VERSION}.$(date +%Y%m%d_%H%M%S)_${SLUG}_${TAG_NAME//[(\)]}
          echo "Base version from POM: $BASE_VERSION"
          echo "Building version: ${VERSION_NUMBER}"
          echo "VERSION_NUMBER=$(echo $VERSION_NUMBER)" >> $GITHUB_ENV

      - name: Build with Maven
        run: ./mvnw -B -Dstyle.color=always -Drevision=${VERSION_NUMBER} -Psign-artifacts,release-judong install

#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ github.ref }}
#          body: |
#            **Branch:** 
#            ${env.WERCKER_GIT_BRANCH}
#            **Maven repository:** 
#            ${env.JUDONG_MAVEN_UPSTREAM_SNAPSHOT}/#browse/browse:maven-judo-release:hu%2Fblackbelt%2Feclipse%2F${project-shortname}
#            **Wercker:** 
#            https://app.wercker.com/${project-repositoryId}/runs/build/${env.WERCKER_RUN_ID}
#          draft: true
#          prerelease: false


#      # Save maven cache      
#      - name: Save Maven cache
#        uses: skjolber/maven-cache-github-action@v1.1
#        with:
#          step: save


#box:
#  id: eu.gcr.io/judo-ng/judo-compiler
#  tag: 3.6.1-jdk11
#no-response-timeout: 15
#command-timeout: 60
#ignore-file: .gitignore
#
#build:
#  steps:
#    - blackbelttechnology/import-gpg-keys@1.0.4:
#      secretkeys: $GPG_SECRET_KEYS
#      ownertrust: $GPG_OWNERTRUST
#
#    - blackbelttechnology/version-from-git-tag@1.0.8
#
#    - blackbelttechnology/version-from-pom@1.0.2:
#      pom: ./pom.xml
#
#    - script:
#      name: calculate version number
#      code: |-
#        export VERSION_NUMBER=${VERSION_FROM_POM_BASE_VERSION}.$(date +%Y%m%d_%H%M%S)_${VERSION_FROM_GIT_TAG_SHORT_SHA1}_${VERSION_FROM_GIT_TAG_CURRENT_BRANCH_VALID_NAME//[(\)]}
#        echo "Building version: ${VERSION_NUMBER}"
#
#    - wercker/maven:
#      goals: versions:set
#      maven_opts: -Dtycho.mode=maven -DnewVersion=${VERSION_NUMBER}
#      settings: .maven.xml
#      cache_repo: true

##    - wercker/maven:
##      goals: tycho-versions:update-eclipse-metadata
##      profiles: modules-eclipse
##      maven_opts: -Dtycho.mode=maven
##      cache_repo: true
##      settings: .maven.xml

#    - wercker/maven:
#      goals: clean deploy
#      profiles: ${BUILD_PROFILES}
#      settings: .maven.xml
#      maven_opts: -Dorg.ops4j.pax.url.mvn.settings=${WERCKER_ROOT}/.maven.xml -DuseCustomSettings=true
#      cache_repo: true
#
#    - wercker/maven:
#      goals: deploy
#      settings: .maven.xml
#      maven_opts: -Dtycho.mode=maven -DdeployOnly -DskipTests=true -Dgithub_release=true
#      profiles: ${DEPLOY_PROFILES}
#      cache_repo: true
#
#    - script:
#      name: get github release attributes
#      code: |-
#        export GITHUB_RELEASE_BODY=$(cat ./.release/.releasetemplate | jq -aRs . | sed 's/"//g')
#        export GITHUB_RELEASE_TITLE=$(echo "$VERSION_NUMBER" | jq -aRs . | sed 's/"//g')
#        echo "Release title: $GITHUB_RELEASE_TITLE"
#        echo "Release notes: $GITHUB_RELEASE_BODY"
#    - github-create-release:
#      token: $GITHUB_ACCESS_TOKEN
#      tag: $VERSION_NUMBER
#      title: $GITHUB_RELEASE_TITLE
#      body: $GITHUB_RELEASE_BODY
#      prerelease: true
#      
##  after-steps:
##    - mbrevda/github-status:
##      token: $GITHUB_ACCESS_TOKEN
##      context: $WERCKER_APPLICATION_NAME
##      msg: build completed
##      fail: an error has occurred
##      url: $WERCKER_RUN_URL
#
## Based on http://vincent.demeester.fr/posts/2012-07-23-maven-release-gitflow/
#release:
#  steps:
#    - blackbelttechnology/import-gpg-keys@1.0.4:
#      secretkeys: $GPG_SECRET_KEYS
#      ownertrust: $GPG_OWNERTRUST
#
#    # Github for SSH access
#    #    - add-to-known_hosts:
#    #      hostname: github.com
#    #      fingerprint: $GITHUB_RSA_FINGERPRINT
#    #      type: rsa
#    #    - add-ssh-key:
#    #      keyname: GITHUB_SSH_KEY
#
#    - script:
#      name: set git remote origis
#      code: |-
#        git remote set-url origin https://$GITHUB_ACCESS_TOKEN@github.com/$WERCKER_GIT_OWNER/$WERCKER_GIT_REPOSITORY.git
#        git fetch origin
#
#    - script:
#      name: display branches
#      code: |-
#        git branch -a
#        git branch -r
#
#
#    - script:
#      name: setup git for maven
#      code: |-
#        git config --global user.email "oss@blackbelt.hu"
#        git config --global user.name "Wercker Release"
#
#    - blackbelttechnology/version-from-git-tag@1.0.8
#
#    - script:
#      name: reset git state to actual commit
#      code: |-
#        git reset --hard $WERCKER_GIT_COMMIT
#
#    - script:
#      name: create barnch for builder
#      code: |-
#        git branch wercker_$WERCKER_RUN_ID
#
#    - blackbelttechnology/version-from-pom@1.0.2:
#      pom: ./pom.xml
#
#    - script:
#      name: create release branch from current commit
#      code: |-
#        git checkout -b release/v$VERSION_FROM_POM_BASE_VERSION wercker_$WERCKER_RUN_ID
#
#    ## Deploy using release plugin
#    #    - wercker/maven:
#    #      goals: release:prepare
#    #      settings: .maven.xml
#    #      profiles: release-blackbelt
#    #      cache_repo: true
#    #
#    #    - wercker/maven:
#    #      goals: release:perform
#    #      settings: .maven.xml
#    #      profiles: release-blackbelt
#    #      cache_repo: true
#
#    # Set version and deploy with steps
#    - wercker/maven:
#      goals: versions:set
#      maven_opts: -Dtycho.mode=maven -DnewVersion=${VERSION_FROM_POM_BASE_VERSION} -DgenerateBackupPoms=false
#      settings: .maven.xml
#      cache_repo: true
#
#    - wercker/maven:
#      goals: clean deploy
#      profiles: ${RELEASE_PROFILES}
#      settings: .maven.xml
#      maven_opts: -Dorg.ops4j.pax.url.mvn.settings=${WERCKER_ROOT}/.maven.xml -DuseCustomSettings=true
#      cache_repo: true
#
#    - wercker/maven:
#      goals: deploy
#      settings: .maven.xml
#      maven_opts: -Dtycho.mode=maven -DdeployOnly -DskipTests=true -Dgithub_release=true
#      profiles: ${DEPLOY_PROFILES}
#      cache_repo: true
#
#    - script:
#      name: commit the release
#      code: |-
#        git add .
#        git commit -m "Release v$VERSION_FROM_POM_BASE_VERSION"
#
#    - script:
#      name: tag release branch
#      code: |-
#        git tag -a v$VERSION_FROM_POM_BASE_VERSION -m "Release v$VERSION_FROM_POM_BASE_VERSION"
#
#    - script:
#      name: increase version number
#      code: "mvn build-helper:parse-version versions:set -DnewVersion=\\${parsedVersion.majorVersion}.\\${parsedVersion.minorVersion}.\\${parsedVersion.nextIncrementalVersion}-SNAPSHOT -DgenerateBackupPoms=false -f ./pom.xml  -Dmaven.repo.local=$WERCKER_CACHE_DIR/.m2"
#
#    - script:
#      name: commit to release branch
#      code: |-
#        git add .
#        git commit -m "Next development cycle"
#
#    # End of deploy
#
#    - script:
#      name: get back to the develop branch
#      code: |-
#        git checkout develop
#
#    - script:
#      name: merge the version back into develop
#      code: |-
#        git merge --no-ff release/v$VERSION_FROM_POM_BASE_VERSION
#
#
#    - script:
#      name: git checkout master
#      code: |-
#        git checkout master
#
#
#    - script:
#      name: merge the version back into master but the tagged version instead of the release/v0.1 HEAD
#      code: |-
#        git merge --no-ff release/v$VERSION_FROM_POM_BASE_VERSION~1
#
#    - script:
#      name: draw git
#      code: |-
#        git log --graph --oneline --all
#
#
#    - script:
#      name: delete release branch
#      code: |-
#        git branch -D release/v$VERSION_FROM_POM_BASE_VERSION
#
#    - script:
#      name: delete builder branch
#      code: |-
#        git branch -D wercker_$WERCKER_RUN_ID
#
#
#    - script:
#      name: push everything
#      code: |-
#        git push origin --all
#        git push origin --tags
#
#    - script:
#      name: get github release attributes
#      code: |-
#        export GITHUB_RELEASE_BODY=$(cat ./.release/.releasetemplate | jq -aRs . | sed 's/"//g')
#        export GITHUB_RELEASE_TITLE=$(echo "$VERSION_NUMBER" | jq -aRs . | sed 's/"//g')
#        echo "Release title: $GITHUB_RELEASE_TITLE"
#        echo "Release notes: $GITHUB_RELEASE_BODY"
#
#    - github-create-release:
#      token: $GITHUB_ACCESS_TOKEN
#      tag: $VERSION_NUMBER
#      title: $GITHUB_RELEASE_TITLE
#      body: $GITHUB_RELEASE_BODY
      